input {
        udp {
                port => 9010
                type => snort
        }

        #lumberjack {
        #        port => 9011
        #        ssl_certificate => "/etc/logstash/ssl/logstash-forwarder.crt"
        #        ssl_key => "/etc/logstash/ssl/logstash-forwarder.key"
        #        type => snort_full

        #        codec => multiline {
        #                 pattern => "^\[\*\*\]"
        #                 negate => true
        #                 what => "previous"
        #        }
        #}

        syslog {
                port => 9012
                type => snort_barnyard
        }

       #stdin {
       #         type => snort_barnyard
       #}

}



filter {




        if [type] == "snort_full" {
                grok {
                         match => { "message" => "%{SNORT_MESSAGE_FULL}" }
                }

                if [Snort_date] {
                        mutate {
                                strip => "Snort_date"
                                add_field => [ "[Alert][Sensor][Node][Name]", "%{host}" ]
                                remove_field => ["file"]
                                remove_field => ["offset"]
                        }

                        date {
                                match => ["Snort_date", "MM/dd-HH:mm:ss.SSSSSS"]
                                target => "[Alert][CreateTime]"
                        }

                        mutate { remove_field => ["Snort_date"] }
                }
        }

        if [type] == "snort" {
                  grok {
                                match => { "message" => "%{IDMEF_MESSAGE}" }
                  }

                  if [syslog5424_ts] {
                            date {
                                #2015-03-21T01:44:27.757618+03:00
                                match => ["syslog5424_ts", "ISO8601"]
                                target => "[Alert][CreateTime]"
                            }
                  } else if [timestamp] {
                            date {
                                #Apr 19 11:55:57
                                match => ["timestamp", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss"]
                                target => "[Alert][CreateTime]"
                            }
                  }

                  if [syslog5424_host] {
                        mutate { add_field => [ "[Alert][Sensor][Node][Name]", "%{syslog5424_host}" ] }
                  } elseif [logsource] {
                        mutate { add_field => [ "[Alert][Sensor][Node][Name]", "%{logsource}" ] }
                  }

                  if [syslog5424_proc] {
                        mutate { add_field => [ "[Alert][Sourse][Process][Pid]", "%{syslog5424_proc}" ] }
                  } else if [pid] {
                        mutate { add_field => [ "[Alert][Sourse][Process][Pid]", "%{pid}" ] }
                  }

                  if [syslog5424_app] {
                        mutate { add_field => [ "[Alert][Sourse][Process][Name]", "%{syslog5424_app}" ] }
                  } elseif [program] {
                        mutate { add_field => [ "[Alert][Sourse][Process][Name]", "%{program}" ] }
                  }

                  mutate
                  {

                                        remove_field => ["syslog5424_ver"]
                                        remove_field => ["syslog5424_ts"]

                                        remove_field => ["pid"]
                                        remove_field => ["syslog5424_proc"]
                                        remove_field => ["syslog5424_app"]
                                        remove_field => ["program"]
                                        remove_field => ["syslog5424_host"]
                                        remove_field => ["logsource"]

                  }
        }

        if [type] == "snort_barnyard" {

                    grok {
                             match => { "message" => "%{SNORT_BARNYARD_MESSAGE}" }
                    }

                    if "[Alert][Protocol][Number]" == "6"
                    {
                        mutate { add_field => [ "[Alert][Protocol]", "TCP" ]}

                        grok { match => { "[Snort][Transport][Header]" => "%{SNORT_BARNYARD_TCPHEADER}" }}
                    }
                    else if "[Alert][Protocol][Number]" == "17"
                    {
                        mutate { add_field => [ "[Alert][Protocol]", "UDP" ]}
                        grok { match => { "[Snort][Transport][Header]" => "%{SNORT_BARNYARD_UDPHEADER}" }}
                    }
                    else if [Alert.Protocol.Number] == "1"
                    {
                        mutate { add_field => [ "[Alert][Protocol]", "ICMP" ]}
                        grok { match => { "[Snort][Transport][Header]" => "%{SNORT_BARNYARD_ICMPHEADER}" }}
                    }
                    else
                    {
                        mutate { add_field => [ "[Alert][Protocol]", "UNKNOWN" ]}
                        grok { match => { "[Snort][Transport][Header]" => "%{SNORT_BARNYARD_DEFAULTHEADER}" }}
                    }


                    mutate {
                        remove_tag => [ "_grokparsefailure_sysloginput" ]
                    }
        }

        if [type] in ["snort", "snort_barnyard"] {


                     if [syslog5424_ts] {
                               date {
                                   #2015-03-21T01:44:27.757618+03:00
                                   match => ["syslog5424_ts", "ISO8601"]
                                   target => "[Alert][CreateTime]"
                               }
                     } else if [timestamp] {
                               date {
                                   #Apr 19 11:55:57
                                   match => ["timestamp", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss"]
                                   target => "[Alert][CreateTime]"
                               }
                     }
        }

        if [type] in ["snort", "snort_full", "snort_barnyard"] {

                if [Alert.Analyzer.Level] == "1" {
                      mutate { add_field => [ "[Alert][Analyzer][Level][Normalized]", "15" ] }
                } else if "[Alert][Analyzer][Level]" == "2" {
                      mutate { add_field => [ "[Alert][Analyzer][Level][Normalized]", "11" ] }
                } else if "[Alert][Analyzer][Level]" == "3" {
                      mutate { add_field => [ "[Alert][Analyzer][Level][Normalized]", "6" ] }
                } else if "[Alert][Analyzer][Level]" == "4" {
                      mutate { add_field => [ "[Alert][Analyzer][Level][Normalized]", "4" ] }
                }

                mutate {
                       add_field => [ "[Alert][Analyzer][Name]", "snort" ]

                       #Next line is hack to fix issue #1. It connected with that Kibana in term graph uses .raw fields, but logstash creates it only for strings fields
                       add_field => [ "[Alert][Analyzer][Level][Normalized][raw]", "%{[Alert][Analyzer][Level][Normalized]}" ]
                       convert => [ "[Alert][Analyzer][Level]", "integer" ]
                       convert => [ "[Alert][Analyzer][Level][Normalized]", "integer" ]

                       add_field => [ "[Alert][Analyzer][Node][Name]", "%{[Alert][Sensor][Node][Name]}" ]
                }
        }
}
